name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x, 20.x]

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libhiredis-dev build-essential cmake

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install hiredis

      - name: Install system dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          vcpkg install hiredis:x64-windows
          echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" >> $env:GITHUB_ENV
          choco install cmake -y

      - name: Install dependencies
        run: npm ci

      - name: Build native module (Unix)
        if: matrix.os != 'windows-latest'
        run: npm run build
        env:
          VCPKG_ROOT: ${{ env.VCPKG_ROOT }}

      - name: Build native module (Windows)
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          node-gyp rebuild
          mkdir -p prebuilds\win32-x64
          copy build\Release\hyperlimit.node prebuilds\win32-x64\node.napi.node
          copy %VCPKG_ROOT%\installed\x64-windows\bin\*.dll build\Release\
          copy %VCPKG_ROOT%\installed\x64-windows\bin\*.dll prebuilds\win32-x64\
        env:
          VCPKG_ROOT: ${{ env.VCPKG_ROOT }}

      - name: Upload prebuilt binaries
        uses: actions/upload-artifact@v3
        with:
          name: prebuilds-${{ matrix.os }}-${{ matrix.node-version }}
          path: prebuilds/

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          registry-url: 'https://registry.npmjs.org'
          scope: '@hyperlimit'
          always-auth: true

      - name: Set version
        shell: bash
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          # Get version from input or tag
          VERSION="${{ github.event.inputs.version }}"
          if [ -z "$VERSION" ]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          
          # Update version in all package.json files
          npm version $VERSION --no-git-tag-version
          cd packages/express && npm version $VERSION --no-git-tag-version && cd ../..
          cd packages/fastify && npm version $VERSION --no-git-tag-version && cd ../..
          cd packages/hyperexpress && npm version $VERSION --no-git-tag-version && cd ../..
          
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Download all prebuilds
        uses: actions/download-artifact@v3
        with:
          path: prebuilds-all

      - name: Merge prebuilds
        run: |
          mkdir -p prebuilds
          cp -r prebuilds-all/*/* prebuilds/

      - name: Create packages
        run: |
          # Install system dependencies for building
          sudo apt-get update
          sudo apt-get install -y libhiredis-dev build-essential cmake

          # Create core package
          mkdir -p dist/hyperlimit
          cp -r prebuilds package.json README.md LICENSE index.js binding.gyp src dist/hyperlimit/
          cd dist/hyperlimit
          # Update package.json for core package
          node -e "
            const pkg = require('./package.json');
            pkg.name = '@hyperlimit/core';
            pkg.version = '${RELEASE_VERSION}';
            require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "
          # Install dependencies and build
          npm install
          npm run build
          npm pack
          cd ../..

          # Create Express middleware package
          mkdir -p dist/hyperlimit-express
          cp -r packages/express/index.js packages/express/package.json README.md LICENSE dist/hyperlimit-express/
          cd dist/hyperlimit-express
          # Update package.json for Express middleware
          node -e "
            const pkg = require('./package.json');
            pkg.version = '${RELEASE_VERSION}';
            pkg.dependencies = {
              '@hyperlimit/core': '${RELEASE_VERSION}'
            };
            require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "
          npm install --registry=http://registry.npmjs.org
          npm pack
          cd ../..

          # Create Fastify middleware package
          mkdir -p dist/hyperlimit-fastify
          cp -r packages/fastify/index.js packages/fastify/package.json README.md LICENSE dist/hyperlimit-fastify/
          cd dist/hyperlimit-fastify
          # Update package.json for Fastify middleware
          node -e "
            const pkg = require('./package.json');
            pkg.version = '${RELEASE_VERSION}';
            pkg.dependencies = {
              '@hyperlimit/core': '${RELEASE_VERSION}'
            };
            require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "
          npm install --registry=http://registry.npmjs.org
          npm pack
          cd ../..

          # Create HyperExpress middleware package
          mkdir -p dist/hyperlimit-hyperexpress
          cp -r packages/hyperexpress/index.js packages/hyperexpress/package.json README.md LICENSE dist/hyperlimit-hyperexpress/
          cd dist/hyperlimit-hyperexpress
          # Update package.json for HyperExpress middleware
          node -e "
            const pkg = require('./package.json');
            pkg.version = '${RELEASE_VERSION}';
            pkg.dependencies = {
              '@hyperlimit/core': '${RELEASE_VERSION}'
            };
            require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "
          npm install --registry=http://registry.npmjs.org
          npm pack
          cd ../..

      - name: Publish packages
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
        run: |
          # Create local .npmrc file
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > .npmrc
          echo "registry=https://registry.npmjs.org/" >> .npmrc
          
          # Publish packages
          cd dist/hyperlimit && npm publish --access public
          cd ../hyperlimit-express && npm publish --access public
          cd ../hyperlimit-fastify && npm publish --access public
          cd ../hyperlimit-hyperexpress && npm publish --access public

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Use version from environment variable
          VERSION="${RELEASE_VERSION}"
          if [ -z "$VERSION" ]; then
            echo "Error: Version is not set"
            exit 1
          fi
          
          echo "Creating release for version ${VERSION}"
          
          # Create release notes
          echo "# HyperLimit v${VERSION}" > release_notes.md
          echo "" >> release_notes.md
          echo "## Packages" >> release_notes.md
          echo "- @hyperlimit/core@${VERSION}" >> release_notes.md
          echo "- @hyperlimit/express@${VERSION}" >> release_notes.md
          echo "- @hyperlimit/fastify@${VERSION}" >> release_notes.md
          echo "- @hyperlimit/hyperexpress@${VERSION}" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Changes" >> release_notes.md
          echo "- See commit history for detailed changes" >> release_notes.md
          
          # Verify tarballs exist
          for pkg in hyperlimit-core hyperlimit-express hyperlimit-fastify hyperlimit-hyperexpress; do
            if [ ! -f "dist/${pkg/-//}/${pkg}-${VERSION}.tgz" ]; then
              echo "Error: Package tarball not found: dist/${pkg/-//}/${pkg}-${VERSION}.tgz"
              exit 1
            fi
          done
          
          # Create GitHub Release
          gh release create "v${VERSION}" \
            --title "HyperLimit v${VERSION}" \
            --notes-file release_notes.md \
            --draft=false \
            --target $GITHUB_SHA \
            dist/hyperlimit/hyperlimit-core-${VERSION}.tgz \
            dist/hyperlimit-express/hyperlimit-express-${VERSION}.tgz \
            dist/hyperlimit-fastify/hyperlimit-fastify-${VERSION}.tgz \
            dist/hyperlimit-hyperexpress/hyperlimit-hyperexpress-${VERSION}.tgz 